{"version":3,"sources":["webpack:///./src/template/blog.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","data","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_styles_blogTemplate_module_scss__WEBPACK_IMPORTED_MODULE_3__","_styles_blogTemplate_module_scss__WEBPACK_IMPORTED_MODULE_3___default","console","log","blogTemplate","props","a","createElement","header","title","markdownRemark","frontmatter","description","className","blogTemplateModule","blogTemplate__main","blogTemplate__h1","blogTemplate__date","date","blogTemplate__text","dangerouslySetInnerHTML","__html","html","m","module","exports","require","default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","React","createContext","PropTypes","object","string","isRequired","func","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","propTypes","shape","Header","siteTitle","_245434667","react_default","headerModule","navbar__purple","gatsby_browser_entry","navbarBrand__white","to","site","siteMetadata","navbar__toggle_button","type","data-toggle","data-target","id","navlink__purple","Layout","children","comp","components_header","SEO","_site$siteMetadata","_public_static_d_2516513492_json__WEBPACK_IMPORTED_MODULE_0__","host","seo","image","url","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3__","titleTemplate","name","content","property","article","twitterUsername","bool","defaultProps"],"mappings":"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","file":"component---src-template-blog-js-0b9c3b3bc26f8986b04a.js","sourcesContent":["import React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\";\r\nimport { graphql } from \"gatsby\"\r\nimport blogTemplateModule from \"../styles/blogTemplate.module.scss\"\r\nexport const data = graphql`\r\n  query($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      frontmatter {\r\n        title\r\n        date\r\n        cover\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n      html\r\n    }\r\n  }\r\n`;\r\n\r\nconsole.log(data);\r\nconst blogTemplate = props => (\r\n    <Layout header=\"white\">\r\n    <SEO title={`Blog - ${props.data.markdownRemark.frontmatter.title}`} description={`blog on ${props.data.markdownRemark.frontmatter.title}`}/>\r\n      <div className={`container ${blogTemplateModule.blogTemplate__main}`}>\r\n        <h1 className={blogTemplateModule.blogTemplate__h1}>{props.data.markdownRemark.frontmatter.title}</h1>\r\n        <p className={blogTemplateModule.blogTemplate__date}>{props.data.markdownRemark.frontmatter.date}</p>\r\n        <div\r\n          className={blogTemplateModule.blogTemplate__text}\r\n          dangerouslySetInnerHTML={{ __html: props.data.markdownRemark.html }}\r\n        />\r\n      </div>\r\n    </Layout>\r\n)\r\n\r\nexport default blogTemplate\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport headerModule from \"../styles/header.module.scss\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nconst Header = ({ siteTitle, header }) => {\r\n  \r\n\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          logo\r\n        }\r\n      }\r\n      allFile(filter: { extension: { eq: \"pdf\" } }) {\r\n        edges {\r\n          node {\r\n            publicURL\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <nav className={`navbar navbar-expand-md ${headerModule.navbar__purple}`}>\r\n      <Link className={`navbar-brand ${headerModule.navbarBrand__white}`} to=\"/\">\r\n          {data.site.siteMetadata.title}\r\n      </Link>\r\n\r\n      <button\r\n        className={`navbar-toggler ${headerModule.navbar__toggle_button}`}\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#collapsibleNavbar\"\r\n      >\r\n        menu\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n        <ul className=\"navbar-nav ml-auto\">\r\n        <li className=\"nav-item\">\r\n          <Link className={`nav-link ${headerModule.navlink__purple}`} to=\"/projects\">\r\n              projects\r\n          </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n          <Link className={`nav-link ${headerModule.navlink__purple}`} to=\"/experience\">\r\n              experience\r\n          </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className={`nav-link ${headerModule.navlink__purple}`} to=\"/blog\">\r\n              blog\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n          <Link className={`nav-link ${headerModule.navlink__purple}`} to=\"/about\">\r\n              about\r\n          </Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\n\r\nimport Header from \"./header\"\r\n\r\nconst Layout = ({ children, comp, header }) => {\r\n  return (\r\n    <div>\r\n      <Header header={header} />\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = props => {\r\n  const query = graphql`\r\n    query SEO {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  `\r\n  const { site } = useStaticQuery(query)\r\n\r\n  const { title, description, host } = site.siteMetadata\r\n\r\n  const seo = {\r\n    title: props.title || title,\r\n    description: props.description || description,\r\n    image: `${host}${props.image || null}`,\r\n    url: `${host}${props.pathname || null}`,\r\n  }\r\n\r\n  return (\r\n    <Helmet title={seo.title} titleTemplate={seo.title}>\r\n      <meta name=\"description\" content={seo.description} />\r\n      <meta name=\"image\" content={seo.image} />\r\n\r\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\r\n\r\n      {(props.article ? true : null) && (\r\n        <meta property=\"og:type\" content=\"article\" />\r\n      )}\r\n\r\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\r\n\r\n      {seo.description && (\r\n        <meta property=\"og:description\" content={seo.description} />\r\n      )}\r\n\r\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\r\n\r\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n\r\n      {props.twitterUsername && (\r\n        <meta name=\"twitter:creator\" content={props.twitterUsername} />\r\n      )}\r\n\r\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\r\n\r\n      {seo.description && (\r\n        <meta name=\"twitter:description\" content={seo.description} />\r\n      )}\r\n\r\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nexport default SEO\r\n\r\nSEO.propTypes = {\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n  image: PropTypes.string,\r\n  article: PropTypes.bool,\r\n}\r\n\r\nSEO.defaultProps = {\r\n  title: null,\r\n  description: null,\r\n  image: null,\r\n  article: false,\r\n}\r\n"],"sourceRoot":""}